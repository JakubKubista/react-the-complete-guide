{"version":3,"sources":["components/layout/form/input/input.js","components/layout/form/input/input.scss","assets/styles/default-form.scss","constants/containers/auth.js","containers/auth/auth.js"],"names":["Input","props","inputElement","validationError","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","className","ValidationError","MESSAGES","enterValidValue","elementType","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Label","label","module","exports","AUTH_FORM","email","type","placeholder","validation","required","valid","password","minLength","Auth","state","authForm","signIn","inputChangedHandler","event","inputName","updatedForm","updateValidatedForm","form","inputValue","target","setState","submitHandler","preventDefault","properties","method","authenticate","switchSignInHandler","prevState","authRedirect","isSignedIn","route","burgerChanged","ROUTES","checkout","home","to","errorMessage","error","message","formElementsArray","createArrayOfFormElements","this","onSubmit","formElement","id","config","btnType","BUTTONS","signUp","loading","DefaultForm","click","switchTo","Component","connect","auth","token","burgerBuilder","dispatch","actions"],"mappings":"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","file":"static/js/4.bc422ece.chunk.js","sourcesContent":["import React from 'react';\nimport { MESSAGES } from '../../../../constants/labels';\nimport classes from './input.scss';\n\nconst Input = props => {\n  let inputElement = null;\n  let validationError = null;\n  const inputClasses = [classes.InputElement];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n    validationError = <p className={classes.ValidationError}>{MESSAGES.enterValidValue}</p>;\n  }\n\n  switch(props.elementType) {\n    case ('input'):\n      inputElement = <input\n        className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n      break;\n\n    case ('textarea'):\n      inputElement = <textarea\n        className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n      break;\n\n    case ('select'):\n      inputElement = <select\n        className={inputClasses.join(' ')}\n        value={props.value}\n        onChange={props.changed} >\n          {props.elementConfig.options.map(option => (\n            <option\n              key={option.value}\n              value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      break;\n\n    default:\n      inputElement = <input\n        className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed} />;\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n      {validationError}\n    </div>\n  );\n};\n\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"input__Input__3ksSp\",\"Label\":\"input__Label___nla4\",\"InputElement\":\"input__InputElement__1K9sV\",\"Invalid\":\"input__Invalid__1yusH\",\"ValidationError\":\"input__ValidationError__1gZpJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DefaultForm\":\"default-form__DefaultForm__IkQ6X\"};","export const AUTH_FORM = {\n  email: {\n    elementType: 'input',\n    elementConfig: {\n      type: 'email',\n      placeholder: 'E-mail'\n    },\n    value: '',\n    validation: {\n      required: true\n    },\n    valid: false,\n    touched: false\n  },\n  password: {\n    elementType: 'input',\n    elementConfig: {\n      type: 'password',\n      placeholder: 'Password'\n    },\n    value: '',\n    validation: {\n      required: true,\n      minLength: 6\n    },\n    valid: false,\n    touched: false\n  },\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport * as actions from '../../store/actions/index';\nimport { createArrayOfFormElements, updateValidatedForm } from '../../utils/index';\nimport { ROUTES } from '../../constants/routes';\nimport { BUTTONS } from '../../constants/labels';\nimport { AUTH_FORM } from '../../constants/containers/auth';\n\nimport Spinner from '../../components/layout/spinner/spinner';\nimport Input from '../../components/layout/form/input/input';\nimport Button from '../../components/layout/button/button';\n\nimport classes from '../../assets/styles/default-form.scss';\n\nclass Auth extends Component {\n  state = {\n    authForm: AUTH_FORM,\n    signIn: true\n  }\n\n  inputChangedHandler = (event, inputName) => {\n    const updatedForm = updateValidatedForm({\n      form: this.state.authForm,\n      inputName,\n      inputValue: event.target.value\n    });\n\n    this.setState({\n      authForm: updatedForm\n    })\n  }\n\n  submitHandler = (event) => {\n    event.preventDefault();\n\n    const properties = {\n      email: this.state.authForm.email.value,\n      password: this.state.authForm.password.value,\n      method: this.state.signIn\n    }\n\n    this.props.authenticate(properties);\n  }\n\n  switchSignInHandler = () => {\n    this.setState(prevState => {\n      return {signIn: !prevState.signIn};\n    })\n  }\n\n  authRedirect = () => {\n    if (this.props.isSignedIn) {\n      const route = this.props.burgerChanged ? ROUTES.checkout : ROUTES.home;\n\n      return <Redirect to={route} />\n    }\n\n    return null;\n  }\n\n  errorMessage = () => {\n    if (this.props.error) {\n      return <p>{this.props.error.message}</p>;\n    }\n\n    return null;\n  }\n\n  render() {\n    const formElementsArray = createArrayOfFormElements(this.state.authForm);\n\n    let form = (\n      <form onSubmit={this.submitHandler}>\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n        ))}\n        <br />\n        <Button btnType=\"Success\">{this.state.signIn ? BUTTONS.signIn : BUTTONS.signUp}</Button>\n      </form>\n    );\n\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    return (\n      <div className={classes.DefaultForm}>\n        {this.authRedirect()}\n        {this.errorMessage()}\n        {form}\n        <br />\n        <Button btnType=\"Danger\" click={this.switchSignInHandler}>\n          {BUTTONS.switchTo} {this.state.signIn ? BUTTONS.signUp : BUTTONS.signIn}\n        </Button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    error: state.auth.error,\n    loading: state.auth.loading,\n    isSignedIn: state.auth && state.auth.token !== null,\n    burgerChanged: state.burgerBuilder.changed\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    authenticate: (properties) => dispatch(actions.authenticate(properties))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}